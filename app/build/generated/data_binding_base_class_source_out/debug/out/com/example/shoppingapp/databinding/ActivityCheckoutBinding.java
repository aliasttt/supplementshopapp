// Generated by view binder compiler. Do not edit!
package com.example.shoppingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.shoppingapp.R;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCheckoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextInputEditText addressInput;

  @NonNull
  public final TextInputEditText cardHolderInput;

  @NonNull
  public final TextInputEditText cardNumberInput;

  @NonNull
  public final Button confirmButton;

  @NonNull
  public final LinearLayout contactFields;

  @NonNull
  public final TextInputEditText cvvInput;

  @NonNull
  public final TextInputEditText expiryInput;

  @NonNull
  public final TextInputEditText nameInput;

  @NonNull
  public final Button nextButton;

  @NonNull
  public final LinearLayout paymentFields;

  @NonNull
  public final TextInputEditText phoneInput;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView totalPriceText;

  private ActivityCheckoutBinding(@NonNull LinearLayout rootView,
      @NonNull TextInputEditText addressInput, @NonNull TextInputEditText cardHolderInput,
      @NonNull TextInputEditText cardNumberInput, @NonNull Button confirmButton,
      @NonNull LinearLayout contactFields, @NonNull TextInputEditText cvvInput,
      @NonNull TextInputEditText expiryInput, @NonNull TextInputEditText nameInput,
      @NonNull Button nextButton, @NonNull LinearLayout paymentFields,
      @NonNull TextInputEditText phoneInput, @NonNull Toolbar toolbar,
      @NonNull TextView totalPriceText) {
    this.rootView = rootView;
    this.addressInput = addressInput;
    this.cardHolderInput = cardHolderInput;
    this.cardNumberInput = cardNumberInput;
    this.confirmButton = confirmButton;
    this.contactFields = contactFields;
    this.cvvInput = cvvInput;
    this.expiryInput = expiryInput;
    this.nameInput = nameInput;
    this.nextButton = nextButton;
    this.paymentFields = paymentFields;
    this.phoneInput = phoneInput;
    this.toolbar = toolbar;
    this.totalPriceText = totalPriceText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCheckoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCheckoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_checkout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCheckoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addressInput;
      TextInputEditText addressInput = ViewBindings.findChildViewById(rootView, id);
      if (addressInput == null) {
        break missingId;
      }

      id = R.id.cardHolderInput;
      TextInputEditText cardHolderInput = ViewBindings.findChildViewById(rootView, id);
      if (cardHolderInput == null) {
        break missingId;
      }

      id = R.id.cardNumberInput;
      TextInputEditText cardNumberInput = ViewBindings.findChildViewById(rootView, id);
      if (cardNumberInput == null) {
        break missingId;
      }

      id = R.id.confirmButton;
      Button confirmButton = ViewBindings.findChildViewById(rootView, id);
      if (confirmButton == null) {
        break missingId;
      }

      id = R.id.contactFields;
      LinearLayout contactFields = ViewBindings.findChildViewById(rootView, id);
      if (contactFields == null) {
        break missingId;
      }

      id = R.id.cvvInput;
      TextInputEditText cvvInput = ViewBindings.findChildViewById(rootView, id);
      if (cvvInput == null) {
        break missingId;
      }

      id = R.id.expiryInput;
      TextInputEditText expiryInput = ViewBindings.findChildViewById(rootView, id);
      if (expiryInput == null) {
        break missingId;
      }

      id = R.id.nameInput;
      TextInputEditText nameInput = ViewBindings.findChildViewById(rootView, id);
      if (nameInput == null) {
        break missingId;
      }

      id = R.id.nextButton;
      Button nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.paymentFields;
      LinearLayout paymentFields = ViewBindings.findChildViewById(rootView, id);
      if (paymentFields == null) {
        break missingId;
      }

      id = R.id.phoneInput;
      TextInputEditText phoneInput = ViewBindings.findChildViewById(rootView, id);
      if (phoneInput == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.totalPriceText;
      TextView totalPriceText = ViewBindings.findChildViewById(rootView, id);
      if (totalPriceText == null) {
        break missingId;
      }

      return new ActivityCheckoutBinding((LinearLayout) rootView, addressInput, cardHolderInput,
          cardNumberInput, confirmButton, contactFields, cvvInput, expiryInput, nameInput,
          nextButton, paymentFields, phoneInput, toolbar, totalPriceText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
